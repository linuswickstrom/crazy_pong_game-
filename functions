from tst import *
import random
import math as math


def ball_rectangle_bounce(ball):
    #red ball bouncing inside little rectangle
    if ball["ball_ry"] > 365 or ball["ball_ry"] < 225:
        ball["ball_rdy"] = ball["ball_rdy"] * -1
    if ball["ball_rx"] > 465 or ball["ball_rx"] < 325: 
        ball["ball_rdx"] = ball["ball_rdx"] * -1
        
def update_ball_position(ball):
    #updates ball positions
    ball["ball_x"] = ball["ball_x"] + ball["ball_dx"]
    ball["ball_y"] = ball["ball_y"] + ball["ball_dy"]
    ball["ball_rx"] = ball["ball_rx"] + ball["ball_rdx"]
    ball["ball_ry"] = ball["ball_ry"] + ball["ball_rdy"]
    
def ball_collision( ball, score ):
    #balls colliding powerup/change of direction
    if (ball["ball_rx"] - 10) < ball["ball_x"] < (ball["ball_rx"] + 20) and (ball["ball_ry"] - 20) < ball["ball_y"] < (ball["ball_ry"] + 30):
        score["triangle_score"] += 1
        if ball["ball_dx"] < 0:
            ball["ball_dx"] = random.randint(3, 4)
            ball["ball_dy"] = (4 - ball["ball_dx"])
        elif ball["ball_dx"] > 0:
            ball["ball_dx"] = random.randint(-4, -3)
            ball["ball_dy"] = (4 + ball["ball_dx"])
            
#resets ball after scoring 
def ball_reset(ball, score):
    if ball["ball_x"] > 785:
        score["left_score"] = score["left_score"] + 1
        ball["ball_x"], ball["ball_y"] = 400, 200
        ball["ball_dy"], ball["ball_dx"] = 0, 0
    elif ball["ball_x"] < 15:
        score["right_score"]= score["right_score"]+ 1
        ball["ball_x"], ball["ball_y"] = 400, 200
        ball["ball_dy"], ball["ball_dx"] = 0, 0
    
def triangle_bounce():
    if ball["ball_x"] < 400 and ball["ball_y"] < 300 :
            ball["ball_dx"] = -sqrt(8) 
            ball["ball_dy"] = sqrt(8)
    elif ball["ball_x"] > 400 and ball["ball_y"] < 300:
            ball["ball_dx"] = sqrt(8) 
            ball["ball_dy"] = sqrt(8)
    elif ball["ball_x"] > 400 and ball["ball_y"] > 300:
            ball["ball_dx"] = sqrt(8) 
            ball["ball_dy"] = -sqrt(8)
    elif ball["ball_x"] < 400 and ball["ball_y"] > 300:
            ball["ball_dx"] = -sqrt(8) 
            ball["ball_dy"] = -sqrt(8) 
        

def check_and_perform_bounce(ball, left, right):
    if ball["ball_y"] > 585 or ball["ball_y"] < 15:
        ball["ball_dy"] = ball["ball_dy"] * -1
    
    if ball["ball_x"] < 75 and ball["ball_y"] < (left["origin_ly"] + 40) and ball["ball_y"] > (left["origin_ly"] - 40):
        if left["rotation_l"] == 0:
            ball["ball_dx"] = ball["ball_dx"] * -1
        else:
            ball["ball_dy"] = 4 * sin(left["rotation_l"])
            ball["ball_dx"] = 4 * cos(left["rotation_l"])
    
    if ball["ball_x"] > 730 and ball["ball_y"] < (right["origin_ry"] + 40) and ball["ball_y"] > (right["origin_ry"] - 40):
        if right["rotation_r"] == 0:
            ball["ball_dx"] = ball["ball_dx"] * -1
        else:
            ball["ball_dy"] = -4 * sin(right["rotation_r"])
            ball["ball_dx"] = -4 * cos(right["rotation_r"])
            
def moving_paddles(left, right):
    if left["left_key"] == "w":
        left["origin_ly"] += -5
    
    elif left["left_key"] == "s":
        left["origin_ly"] += 5
        
    elif right["right_key"] == "i":
            right["origin_ry"] += -5
            
    elif right["right_key"] == "k":
            right["origin_ry"] += 5

def triangle_check_and_bounce(ball, score):
    if score["triangle_score"] == 1 and ball["ball_y"] < (ball["ball_x"] - 330) and ball["ball_y"] < (470 - ball["ball_x"]):
        triangle_bounce()
    #triangle score 1 bounce lower triangle
    if score["triangle_score"] == 1 and ball["ball_x"] < (ball["ball_y"] - 130) and ball["ball_y"] > (920 - ball["ball_x"]):
        triangle_bounce()
    
    #triangle score 2 bounce upper triangle
    if score["triangle_score"] == 2 and ball["ball_y"] < (ball["ball_x"] - 300) and ball["ball_y"] < (500 - ball["ball_x"]):
        triangle_bounce()
        
    #triangle score 2 bounce lower triangle
    if score["triangle_score"] == 2 and ball["ball_x"] < (ball["ball_y"] - 100) and ball["ball_y"] > (900 - ball["ball_x"]):
        triangle_bounce()
        
    #triangle score 3 bounce upper triangle
    if score["triangle_score"] == 3 and ball["ball_y"] < (ball["ball_x"] - 275) and ball["ball_y"] < (525 - ball["ball_x"]):
        triangle_bounce()
        
    #triangle score 3 bounce lower triangle
    if score["triangle_score"] == 3 and ball["ball_x"] < (ball["ball_y"] - 75) and ball["ball_y"] > (875 - ball["ball_x"]):
        triangle_bounce()
        
def screen_draw(ball, score, right, left):
    textSize(20)
    fill(255)
    text("Crazy Pong", 340 , 50)
    text(str(score["left_score"]), 70 , 50)
    text("(W/S)", 50 , 90)
    text("Rotate (E/R)", 20, 120)
    text(str(score["right_score"]), 700 , 50)
    text("(I/K)", 685 , 90)
    text("Rotate (Y/U)", 650, 120)
    left["rotation_l"] = (left["ro_left"]*PI)/30
    right["rotation_r"] = (right["ro_right"]*PI)/30
    
    pushMatrix();
    translate(50, left["origin_ly"])
    rotate(left["rotation_l"])
    fill(255)
    stroke(255)
    rect(-10, left["left_y"], 20, 80)
    stroke(255)
    popMatrix();
    
    pushMatrix();
    translate(750, right["origin_ry"])
    rotate(right["rotation_r"])
    rect(-10, right["right_y"], 20, 80)
    popMatrix();
    
    fill(255)
    rect(325, 225, 150, 150)
    
    fill(255)
    stroke(0)
    ellipse(ball["ball_x"], ball["ball_y"], 30, 30) 
    fill(255, 51, 51)
    stroke(255, 51, 51)
    rect(ball["ball_rx"], ball["ball_ry"], 10, 10) 
    
    #triangle step 1
    if score["triangle_score"] == 1:
        triangle(350,0,450,0,400,50)
        triangle(350,600,450,600,400,550)
   
     #triangle step 2
    if score["triangle_score"] == 2:
        triangle(325,0,475,0,400,75)
        triangle(325,600,475,600,400,525)
    
    #triangle step 3
    if score["triangle_score"] == 3:
        triangle(300,0,500,0,400,100)
        triangle(300,600,500,600,400,500)  
